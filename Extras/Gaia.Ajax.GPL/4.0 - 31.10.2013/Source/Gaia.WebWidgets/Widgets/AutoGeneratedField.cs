/*******************************************************************
 * Gaia Ajax - Ajax Control Library for ASP.NET  
 * Copyright (C) 2008 - 2011 Gaiaware AS
 * All rights reserved. 
 * This program is distributed under either GPL version 3 
 * as published by the Free Software Foundation or the
 * Gaia Commercial License version 1 as published by Gaiaware AS
 * read the details at http://gaiaware.net/product/dual-licensing 
 ******************************************************************/

using System;
using System.Web;
using System.Collections.Specialized;
using ASP = System.Web.UI.WebControls;

namespace Gaia.WebWidgets
{
    ///<summary>
    /// Represents an automatically generated field in a data-bound control.
    ///</summary>
    class AutoGeneratedField : BoundField
    {
        private bool? _useCheckBox;
        private bool _suppressExceptions;

        ///<summary>
        /// Gets or sets the data type of the values displayed in an <see cref="AutoGeneratedField"/> object.
        ///</summary>
        public Type DataType
        {
            get { return StateUtil.Get(ViewState, "dtype", typeof(string));  }
            set { StateUtil.Set(ViewState, "dtype", value); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether empty string ("") values are converted to null when the field values are retrieved from the data source.
        /// </summary>
        public override bool ConvertEmptyStringToNull 
        {
            set { ThrowIfNotSuppressed(); }
        }

        /// <summary>
        /// Gets or sets the string that specifies the format in which the alternate text for each image in an <see cref="AutoGeneratedField"/> object is rendered.
        /// </summary>
        public override string DataFormatString 
        {
            set { ThrowIfNotSuppressed(); }
        }

        /// <summary>
        /// Gets or sets a value indicating whether the <see cref="AutoGeneratedField"/> object is visible in insert mode.
        /// </summary>
        public override bool InsertVisible 
        {
            set { ThrowIfNotSuppressed(); }
        }

        /// <summary>
        /// Fills the specified <see cref="System.Collections.Specialized.IOrderedDictionary"/> object with the values from the specified <see cref="ASP.DataControlFieldCell" /> object.
        /// </summary>
        /// <param name="dictionary">An <see cref="System.Collections.Specialized.IOrderedDictionary" /> used to store the values of the specified cell.</param>
        /// <param name="cell">The <see cref="ASP.DataControlFieldCell"/> that contains the values to retrieve.</param>
        /// <param name="rowState">One of the <see chref="ASP.DataControlRowState" /> values.</param>
        /// <param name="includeReadOnly">The value true includes only the values of read-only fields; otherwise, false.</param>
        public override void ExtractValuesFromCell(IOrderedDictionary dictionary, ASP.DataControlFieldCell cell, ASP.DataControlRowState rowState, bool includeReadOnly) 
        {
            if (UseCheckBox) 
            {
                object result = null;
                var dataField = DataField;
                
                if (cell.Controls.Count > 0) 
                {
                    var box = cell.Controls[0] as CheckBox;
                    if ((box != null) && (includeReadOnly || box.Enabled)) 
                        result = box.Checked;
                }

                if (result != null) 
                {
                    if (dictionary.Contains(dataField))
                        dictionary[dataField] = result;
                    else
                        dictionary.Add(dataField, result);
                }
            } 
            else
                base.ExtractValuesFromCell(dictionary, cell, rowState, includeReadOnly);
        }

        /// <summary>
        /// Copies properties into specified new field.
        /// </summary>
        /// <param name="newField">New field to copy properties into</param>
        protected override void CopyProperties(ASP.DataControlField newField) 
        {
            var destination = (AutoGeneratedField) newField;
            destination.DataType = DataType;

            _suppressExceptions = true;
            destination._suppressExceptions = true;
            
            base.CopyProperties(newField);
            
            _suppressExceptions = false;
            destination._suppressExceptions = false;
        }

        /// <summary>
        /// Creates an empty <see cref="AutoGeneratedField"/> object.
        /// </summary>
        /// <returns>An empty <see cref="AutoGeneratedField"/>.</returns>
        protected override ASP.DataControlField CreateField() 
        {
            return new AutoGeneratedField();
        }

        /// <summary>
        /// Retrieves the value used for a field's value when rendering the <see cref="T:System.Web.UI.WebControls.BoundField"/> object in a designer.
        /// </summary>
        /// <returns>
        /// The value to display in the designer as the field's value.
        /// </returns>
        protected override object GetDesignTimeValue()
        {
            if (UseCheckBox)
                return true;

            var value = base.GetDesignTimeValue();
            return value != null && (bool) value;
        }

        /// <summary>
        /// Initializes the specified <see cref="ASP.DataControlFieldCell"/> object to the specified row state.
        /// </summary>
        /// <param name="cell">The <see cref="ASP.DataControlFieldCell"/> to initialize.</param>
        /// <param name="rowState">One of the <see cref="ASP.DataControlRowState"/> values.</param>
        protected override void InitializeDataCell(ASP.DataControlFieldCell cell, ASP.DataControlRowState rowState)
        {
            if (UseCheckBox)
            {
                CheckBox box = null;
                var canBeDataBound = false;
                var isEdit = (rowState & ASP.DataControlRowState.Edit) != ASP.DataControlRowState.Normal;
                if ((isEdit && !ReadOnly) || ((rowState & ASP.DataControlRowState.Insert) != ASP.DataControlRowState.Normal))
                {
                    box = new CheckBox();
                    canBeDataBound = DataField.Length != 0 && isEdit;
                }
                else if (DataField.Length != 0)
                {
                    box = new CheckBox {Enabled = false};
                    canBeDataBound = true;
                }
                if (box != null)
                {
                    box.ToolTip = HeaderText;
                    cell.Controls.Add(box);
                }
                if (canBeDataBound)        
                    box.DataBinding += OnDataBindField;
            }
            else
                base.InitializeDataCell(cell, rowState);
        }

        /// <summary>
        /// Binds the value of a field to the <see cref="T:System.Web.UI.WebControls.BoundField"/> object.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        /// <exception cref="T:System.Web.HttpException">
        /// The control to which the field value is bound is not a <see cref="T:System.Web.UI.WebControls.TextBox"/> or a <see cref="T:System.Web.UI.WebControls.TableCell"/>. 
        /// </exception>
        protected override void OnDataBindField(object sender, EventArgs e)
        {
            if (UseCheckBox) 
            {
                var checkBox = sender as CheckBox;

                if (checkBox == null)
                    throw new HttpException("AutoGenerated CheckBoxField wrong control type during DataBind.");

                CheckBoxField.SetCheckBoxValue(checkBox, GetValue(checkBox.NamingContainer));
            }
            else
                base.OnDataBindField(sender, e);
        }

        /// <summary>
        /// Returns true if <see cref="CheckBox"/> is autogenerated in the field.
        /// </summary>
        private bool UseCheckBox
        {
            get
            {
                if (!_useCheckBox.HasValue)
                    _useCheckBox = DataType == typeof(bool) || DataType == typeof(bool?);
                return _useCheckBox.Value;
            }
        }

        /// <summary>
        /// Throws <see cref="NotSupportedException"/>.
        /// </summary>
        private void ThrowIfNotSuppressed() 
        {
            if (_suppressExceptions) return;
            throw new NotSupportedException();
        }
    }
}
